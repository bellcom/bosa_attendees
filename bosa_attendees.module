<?php
/**
 * bosa_attendees module
 *
 * @author Thomas Thune Hansen <tth@bellcom.dk>
 * @version $0.1
 * @copyright 2012 bellcom open source aps
 **/

/*
 * Implements hook_cron()
 */
function bosa_attendees_cron(){
  bosa_attendees_send_mail();
}

/*
 * Implements hook_menu()
 */
function bosa_attendees_menu() {
  $items['bosaattendees/test'] = array(
    'page callback' => 'bosa_attendees_test',
   'access arguments' => array('access content'), 
  );
  $items['attendees'] = array(
   'page callback' => 'bosa_attendees_page',
   'access arguments' => array('access content'), 
  );
  return $items;
}

/*
 * Implements hook block_info
 */
function bosa_attendees_block_info() {
  $blocks['bosa_attendees'] = array(
    'info' => t('List of attendees'),
  );

  return $blocks;
}

/*
 * Implements hook block_view
 */
function bosa_attendees_block_view($delta = '') {


  switch ($delta) {
    case 'bosa_attendees':
      $block['subject'] = t('bosa attendees');
      $block['content'] = main_page();
      break;
  }
  drupal_add_library('system','ui.datepicker');
  drupal_add_js('jQuery(document).ready(function(){jQuery( "#edit-offer-date" ).datepicker({

      autoSize: true
    }).attr("readonly", true);});', 'inline'); 

  return $block;
}

function main_page() {
  return drupal_get_form('bosa_attendees_form');
}

function bosa_attendees_form($form, &$form_state) {

  // Fetch a list of product names for the dropdown
  $productsQuery = new EntityFieldQuery();
  $productsQuery->entityCondition('entity_type', 'commerce_product')
   ->fieldCondition('field_offer_dato', 'value', 'NOW()', '<'); 
 
  $products = $productsQuery->execute();

  $offerOptions = array('0' => 'VÃ¦lg');
  if( isset($products['commerce_product']))
  {
    foreach( $products['commerce_product'] as $product)
    {
      $entity = entity_load('commerce_product', array($product->product_id));
      $offerOptions = $offerOptions + array( $entity[$product->product_id]->sku => $entity[$product->product_id]->title . ' - ' .$entity[$product->product_id]->field_offer_dato[LANGUAGE_NONE][0]['value']); 
    }
  }

  // build the forms 
  // products
  $form = array();
  $form['products'] = array(
    '#type' => 'select',
    '#options' => $offerOptions,
    '#ajax' => array(
      'callback' => '_bosa_attendees_offer_callback',
      'wrapper' => 'replace_textfield_div',
    ),
    '#prefix' => '<div class="offer"><div class="form-label"><h3>Produkter:</h3></div>',
    '#suffix' => '</div>'
  );

  $form['offer_date'] = array(
    '#type' => 'textfield',
    '#ajax' => array(
      'event' => 'change',
      'callback' => '_bosa_attendees_offer_callback_date',
      'wrapper' => 'replace_textfield_div',
    ),
    '#prefix' => '<div class="date"><div class="form-label">Dato:</div>',
    '#suffix' => '</div><div id="replace_textfield_div"></div>',
  );

   return $form;
}

function _bosa_attendees_offer_callback($form, $form_state) {
  $id = commerce_product_load_by_sku($form_state['values']['products']);
  $link = strip_tags($base_url) .'/attendees/'. $id->product_id .'/'.md5($form_state['values']['products']).'/print' ;

  return '<div id="replace_textfield_div"><div class="print-page"><a href="'.$link.'">Udskriv</a></div>' . _bosa_attendees_by_sku($form_state['values']['products']).  '</div>';
}

function _bosa_attendees_offer_callback_date($form, $form_state) {
  // first we format the date
  $date_array = explode('/', $form_state['values']['offer_date']);
  $date = $date_array[2].'-'.$date_array[0].'-'.$date_array[1].'%';

  // then we query for products with given date
  $productsQuery = new EntityFieldQuery();
  $productsQuery->entityCondition('entity_type', 'commerce_product')
    ->entityCondition('bundle', 'offer')
  ->fieldCondition('field_offer_dato', 'value', $date, 'LIKE'); 

  $products = $productsQuery->execute();

  $products_object = reset($products);

  foreach($products_object as $product){

    // first we need to get the sku's for the products on this date
    $entity = entity_load('commerce_product', array($product->product_id));
    $product_sku = $entity[$product->product_id]->sku; 

    $attendees .= '<div class="sku-title">'.$product_sku.'</div>';
    $attendees .= _bosa_attendees_by_sku($product_sku);

  }   
  return '<div id="replace_textfield_div">' . $attendees .  '</div>';

}

function _bosa_attendees_by_sku($product_sku) {
  $product = commerce_product_load_by_sku($product_sku);
  $extraLineItems = _bosa_attendees_extras_by_product_id($product->product_id);

  $lineItemQuery = new EntityFieldQuery();
  $lineItemQuery->entityCondition('entity_type', 'commerce_line_item')
   ->propertyCondition('line_item_label', $product_sku, '='); 
  
  $lineItems = $lineItemQuery->execute();

  if(!empty($lineItems)) {
    foreach ($lineItems['commerce_line_item'] as $lineItem) 
    {
      $attendees = _bosa_attendees_from_line_item_id($lineItem->line_item_id);
      if(!empty($attendees))
      {
        $end = array('order_id' => '', 'comment' => '');

        if(isset($allAttendees))
        {
          $end = end($allAttendees);
        }
        
        if($end['order_id'] == $attendees['order_id'] && $end['comment'] == $attendees['comment'])
        {

          $allAttendees[sizeof($allAttendees)-1]['quantity']++;
        }
        else
        {
          $allAttendees[] = $attendees;
        }
      }
    } 
  }
  
  if($extraLineItems['commerce_line_item'])
  {
    foreach ($extraLineItems['commerce_line_item'] as $extraLineItem)
    {
      $values = _bosa_attendees_extras_load_values($extraLineItem->line_item_id);
      $extraValues[$values['order_id']][] = $values;
      //load product for lineitem
    }
  }
  return _bosa_attendees_html($allAttendees, $extraValues);

}

/*
 * Function for fetching name, quanitity an comments on products with specified line item id
 * @param
 *  lineitem id for product
 * @return
 */
function _bosa_attendees_from_line_item_id($line_item_id)
{
  $lineItemsEntity= entity_load('commerce_line_item', array($line_item_id));
  $lineItemEntity = reset($lineItemsEntity);

  $orderEntity = entity_load('commerce_order', array($lineItemEntity->order_id));

  $orderEntity = reset($orderEntity);

  $comment = isset($lineItemEntity->field_line_item_comment[LANGUAGE_NONE][0]['value'])  ? $lineItemEntity->field_line_item_comment[LANGUAGE_NONE][0]['value'] : '-';

  if(isset($orderEntity->status))
  {
    if ($orderEntity->status == 'completed')
    {
      $wrapper = entity_metadata_wrapper('commerce_order', $orderEntity);
      $address = $wrapper->commerce_customer_billing->commerce_customer_address->value();
      $phone = $wrapper->commerce_customer_billing->field_mobile_phone->value();
      
      $attendees = array(
        'name' => $address['name_line'],
        'phone' => $phone,
        'quantity' => (int)$lineItemEntity->quantity,
        'order_id' => $orderEntity->order_id,
        'comment' => $comment,
        'line_item_id' => $lineItemEntity->line_item_id,
        'product_sku' => $lineItemEntity->line_item_label,
      );
    }
  }
  if(isset($attendees)) 
  {
    return $attendees;
  }
}

function bosa_attendees_page($id, $key, $print = null){
  $entity = reset(entity_load('commerce_product', array($id)));

  if( $key == md5($entity->sku))
  {
    if($print == "print") {
      drupal_add_js('window.print();', array('type' => 'inline'));
    }
    return '<div class="pane-bosa-attendees-bosa-attendees">'. _bosa_attendees_offer_callback(array(), array('values' => array('products' => $entity->sku) )) .'</div>';
  }
}

function bosa_attendees_test($id, $key){
  bosa_attendees_send_mail();
}

function _bosa_attendees_extras_by_product_id($productId) {
  $lineItemQuery = new EntityFieldQuery();
  $lineItemQuery->entityCondition('entity_type', 'commerce_line_item')
    ->fieldCondition('field_line_item_ref', 'value', $productId); 
  
  $lineItems = $lineItemQuery->execute(); 

  return $lineItems;
}

function _bosa_attendees_extras_load_values($lineItemId) {
  $lineItemEntity = reset(entity_load('commerce_line_item', array($lineItemId)));

  $comment = isset($lineItemEntity->field_line_item_comment[LANGUAGE_NONE][0]['value']) ? $lineItemEntity->field_line_item_comment[LANGUAGE_NONE][0]['value'] : '-';
  $product = commerce_product_load_by_sku($lineItemEntity->line_item_label);

  $values = array(
    'product_sku' => $product->sku,
    'product_title' => $product->title,
    'quantity' => (int)$lineItemEntity->quantity,
    'comment' => $comment,
    'order_id' => $lineItemEntity->order_id,
    'line_item_id' => $lineItemEntity->line_item_id,
  );

  return $values; 
}

function _bosa_attendees_html($allAttendees, $extraValues) {
  $offerAttendees = '<div class="title"><div class="name">Navn:</div><div class="phone">Telefonnr:</div><div class="quantity">antal:</div><div class="comment">kommentar:</div></div>';

  $i = "";
  
  if(!empty($allAttendees)){
    foreach($allAttendees as $attendee)
    {
      $i++;
      $row = $i%2? "odd": "even";
      
      $offerAttendees .= '<div class="'.$row.'">';
      //display product
      $offerAttendees .= '<div class="name">'.$attendee['name'] .'</div>';
      $offerAttendees .= '<div class="phone">'.$attendee['phone'] .'</div>';
      $offerAttendees .= '<div class="quantity">'.$attendee['quantity'].'</div>';
      //display comment
      $offerAttendees .= '<div class="comment">'.$attendee['comment'] .'</div>';

      if(isset($extraValues[$attendee['order_id']]))
      {
        $offerAttendees .= '<div class="extras">';
        
        foreach($extraValues[$attendee['order_id']] as $extra )
        {
          $offerAttendees .= '<div class="sku">' .$extra['product_sku'] .'</div>';
          $offerAttendees .= '<div class="quantity">' .$extra['quantity'] .'</div>';
          $offerAttendees .= '<div class="comment">' .$extra['comment'] .'</div>';
        }

        $offerAttendees .= '</div>';
      }
      $offerAttendees .= '</div>';
      $number_of_attendees += $attendee['quantity'];
    }
  }
  else 
  {
    $offerAttendees .= '<div class="name">Ingen deltagere</div>';

  }

  $offerAttendees .= '<div class="number_of_attendees_title">Deltagere i alt:</div><div class="number_of_attendees">'.$number_of_attendees.'</div>';

  return $offerAttendees;
}


function bosa_attendees_send_mail(){
  // for testing
  //variable_del('bosa_attendees_sent_list_ids');

  $ids = unserialize(variable_get('bosa_attendees_sent_list_ids'));
  $tomorrow  = date('Y-m-d', strtotime("tomorrow"));
  
  //get product skus for tomorrow
  $productsQuery = new EntityFieldQuery();
  $productsQuery->entityCondition('entity_type', 'commerce_product')
   ->fieldCondition('field_offer_dato', 'value', $tomorrow .' 00:00:00', '>') 
   ->fieldCondition('field_offer_dato', 'value', $tomorrow .' 23:59:59', '<'); 
 
  $products = reset($productsQuery->execute());
  if($products){
  //loop over, fetch attendees and send mail
  foreach($products as $product)
  {

    $entity = reset(entity_load('commerce_product', array($product->product_id)));

    if
    (
      isset($entity->field_seller_email[LANGUAGE_NONE][0]['email']) 
      &&
      !in_array($entity->product_id, $ids)
    )
    {
      global $base_url;

      $key = md5($entity->sku);
      $attendees = 'Du kan se deltagerlisten her:'. strip_tags($base_url) .'/attendees/'. $entity->product_id .'/'.$key ;
      //error_log(__FILE__.':'.__LINE__. print_r($attendees, 1)); // tth@bellcom.dk debugging

      $email = $entity->field_seller_email[LANGUAGE_NONE][0]['email'];
      $module = 'bosa_attendees';
      $key = 'key';
      $language = language_default();
      $params = array();
      $from = NULL;
      $send = FALSE;

      // build mail
      $message = drupal_mail($module, $key, $email, $language, $params, $from, $send);
      //$message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      $message['subject'] = 'Deltagerliste: ' . $entity->sku;
      $message['body'][] = $attendees;

      // Retrieve the responsible implementation for this message.
      $system = drupal_mail_system($module, $key);

      // Format the message body.
      $message = $system->format($message);

      // Send e-mail.
      $message['result'] = $system->mail($message);

      //error_log(__FILE__.':'.__LINE__. print_r($message, 1)); // tth@bellcom.dk debugging
      $ids[] = $entity->product_id;

    }
  }
  variable_set('bosa_attendees_sent_list_ids', serialize($ids));
}
}


